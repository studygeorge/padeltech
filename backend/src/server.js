require('dotenv').config();
const express = require('express');
const cors = require('cors');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
const { sequelize } = require('./models');
const { AmericanoGame, AmericanoPlayer, AmericanoMatch } = require('./models/americano');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
const authRoutes = require('./routes/auth');
const matchRoutes = require('./routes/match');
const ratingRoutes = require('./routes/rating');
const adminRoutes = require('./routes/admin');
const americanoRoutes = require('./routes/americano');
const tournamentRoutes = require('./routes/tournaments');

const app = express();

// Middleware
app.use(cors({
  origin: process.env.FRONTEND_URL || '*',
  credentials: true
}));
app.use(express.json());

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// –†–æ—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/matches', matchRoutes);
app.use('/api/matches/americano', americanoRoutes);
app.use('/api/rating', ratingRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/tournaments', tournamentRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 404
app.use('*', (req, res) => {
  res.status(404).json({ error: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
const initApp = async () => {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ë–î:');
    console.log('DB_HOST:', JSON.stringify(process.env.DB_HOST));
    console.log('DB_NAME:', JSON.stringify(process.env.DB_NAME));
    console.log('DB_USER:', JSON.stringify(process.env.DB_USER));
    console.log('DB_PORT:', JSON.stringify(process.env.DB_PORT));
    console.log('typeof DB_HOST:', typeof process.env.DB_HOST);
    
    console.log('üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î:', {
      host: process.env.DB_HOST || '127.0.0.1',
      database: process.env.DB_NAME || 'u3188490_default',
      user: process.env.DB_USER || 'u3188490_default',
      port: process.env.DB_PORT || 3306,
      hasPassword: !!process.env.DB_PASS
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await sequelize.authenticate();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –í–°–ï –º–æ–¥–µ–ª–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º—ã–µ)
    await sequelize.sync({ 
      alter: true, // –ò–∑–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      force: false // –ù–ï —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    });
    
    console.log('‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    const queryInterface = sequelize.getQueryInterface();
    const tables = await queryInterface.showAllTables();
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üåê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üîó API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if (error.name === 'SequelizeAccessDeniedError') {
      console.error('üîí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      console.error('üìù –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
        host: process.env.DB_HOST || '127.0.0.1',
        user: process.env.DB_USER || 'u3188490_default',
        database: process.env.DB_NAME || 'u3188490_default',
        port: process.env.DB_PORT || 3306,
        hasPassword: !!process.env.DB_PASS
      });
    }
    
    if (error.name === 'SequelizeConnectionError' || error.name === 'SequelizeConnectionRefusedError') {
      console.error('üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.error('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.error('  - MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: systemctl status mysql');
      console.error('  - –ü–æ—Ä—Ç 3306 –¥–æ—Å—Ç—É–ø–µ–Ω: netstat -tlnp | grep :3306');
      console.error('  - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: mysql -h 127.0.0.1 -u u3188490_default -p');
    }
    
    if (error.name === 'SequelizeHostNotFoundError') {
      console.error('üåê –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ DB_HOST –≤ .env —Ñ–∞–π–ª–µ');
      console.error('üîß –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ DB_HOST:', JSON.stringify(process.env.DB_HOST));
    }
    
    process.exit(1);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (err) => {
  console.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
initApp();