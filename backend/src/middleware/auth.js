const jwt = require('jsonwebtoken');
const { sequelize } = require('../models');

const auth = async (req, res, next) => {
  try {
    console.log('üîê Auth middleware started');
    console.log('üìã Authorization header:', req.headers.authorization ? 'Present' : 'Missing');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const authHeader = req.headers.authorization;
    if (!authHeader) {
      console.log('‚ùå No authorization header');
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    const token = authHeader.replace('Bearer ', '');
    if (!token) {
      console.log('‚ùå No token in header');
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    console.log('üîç Token found, length:', token.length);
    console.log('üîç Token preview:', token.substring(0, 20) + '...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key');
      console.log('‚úÖ Token decoded successfully:', { id: decoded.id, username: decoded.username });
    } catch (jwtError) {
      console.log('‚ùå JWT verification failed:', jwtError.message);
      if (jwtError.name === 'JsonWebTokenError') {
        return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }
      if (jwtError.name === 'TokenExpiredError') {
        return res.status(401).json({ error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫' });
      }
      throw jwtError;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ raw SQL
    console.log('üë§ Looking for user with ID:', decoded.id);
    const users = await sequelize.query(
      'SELECT * FROM users WHERE id = ?',
      {
        replacements: [decoded.id],
        type: sequelize.QueryTypes.SELECT
      }
    );
    
    console.log('üë§ User query completed, found:', users.length, 'users');
    
    if (users.length === 0) {
      console.log('‚ùå User not found in database for ID:', decoded.id);
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const user = users[0];
    console.log('‚úÖ User found:', { id: user.id, username: user.username, telegram_id: user.telegram_id });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    req.user = user;
    console.log('‚úÖ User attached to request object');
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    next();
  } catch (error) {
    console.error('‚ùå Auth middleware error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
  }
};

module.exports = auth;