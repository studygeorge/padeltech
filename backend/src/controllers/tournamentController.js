const { Tournament, TournamentPair, User } = require('../models');
const { Op } = require('sequelize');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
const getUpcomingTournaments = async (req, res) => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const tournaments = await Tournament.findAll({
      where: {
        tournament_date: {
          [Op.gte]: today
        },
        status: 'upcoming'
      },
      include: [
        {
          model: TournamentPair,
          as: 'pairs',
          include: [{
            model: User,
            as: 'user',
            attributes: ['id', 'first_name', 'last_name', 'username', 'photo_url']
          }]
        },
        {
          model: User,
          as: 'creator',
          attributes: ['id', 'first_name', 'last_name', 'username']
        }
      ],
      order: [['tournament_date', 'ASC']],
      limit: 5 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    });

    const formattedTournaments = tournaments.map(tournament => {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞
      const occupiedSlots = tournament.pairs ? tournament.pairs.length : 0;
      const totalSlots = tournament.pairs_count * 2; // 2 –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–∞—Ä—É
      
      return {
        id: tournament.id,
        name: tournament.name,
        tournamentDate: tournament.tournament_date,
        pairsCount: tournament.pairs_count,
        description: tournament.description,
        status: tournament.status,
        creator: tournament.creator,
        occupiedSlots,
        totalSlots,
        availableSlots: totalSlots - occupiedSlots,
        isFullyBooked: occupiedSlots >= totalSlots,
        participants: tournament.pairs ? tournament.pairs.map(pair => pair.user) : [],
        createdAt: tournament.created_at
      };
    });

    res.json(formattedTournaments);
  } catch (error) {
    console.error('‚ùå Error getting upcoming tournaments:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ ID
const getTournamentById = async (req, res) => {
  try {
    const { id } = req.params;

    console.log('üèÜ Getting tournament by ID:', id);

    const tournament = await Tournament.findByPk(id, {
      include: [
        {
          model: TournamentPair,
          as: 'pairs',
          include: [{
            model: User,
            as: 'user',
            attributes: ['id', 'first_name', 'last_name', 'username', 'photo_url']
          }]
        },
        {
          model: User,
          as: 'creator',
          attributes: ['id', 'first_name', 'last_name', 'username']
        }
      ]
    });

    if (!tournament) {
      return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞
    const occupiedSlots = tournament.pairs ? tournament.pairs.length : 0;
    const totalSlots = tournament.pairs_count * 2;
    
    const formattedTournament = {
      id: tournament.id,
      name: tournament.name,
      tournamentDate: tournament.tournament_date,
      pairsCount: tournament.pairs_count,
      description: tournament.description,
      status: tournament.status,
      creator: tournament.creator,
      occupiedSlots,
      totalSlots,
      availableSlots: totalSlots - occupiedSlots,
      isFullyBooked: occupiedSlots >= totalSlots,
      participants: tournament.pairs ? tournament.pairs.map(pair => pair.user) : [],
      createdAt: tournament.created_at
    };

    console.log('‚úÖ Tournament found:', formattedTournament);
    res.json(formattedTournament);
  } catch (error) {
    console.error('‚ùå Error getting tournament:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞' });
  }
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
const registerForTournament = async (req, res) => {
  try {
    const { id: tournamentId } = req.params; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—É—á–∞–µ–º id –∏–∑ params
    const userId = req.user.id;

    console.log('üéæ User registration attempt:', { tournamentId, userId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    const tournament = await Tournament.findByPk(tournamentId, {
      include: [{
        model: TournamentPair,
        as: 'pairs'
      }]
    });

    if (!tournament) {
      return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è
    if (tournament.status !== 'upcoming') {
      return res.status(400).json({ error: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫—Ä—ã—Ç–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    if (new Date(tournament.tournament_date) < today) {
      return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä —É–∂–µ –ø—Ä–æ—à–µ–ª' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    const existingRegistration = await TournamentPair.findOne({
      where: {
        tournament_id: tournamentId,
        user_id: userId
      }
    });

    if (existingRegistration) {
      return res.status(400).json({ error: '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
    const occupiedSlots = tournament.pairs ? tournament.pairs.length : 0;
    const totalSlots = tournament.pairs_count * 2;

    if (occupiedSlots >= totalSlots) {
      return res.status(400).json({ error: '–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ' });
    }

    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    let pairNumber = 1;
    let isLeader = true;

    // –ò—â–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É —Å –æ–¥–Ω–∏–º –∏–≥—Ä–æ–∫–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    const pairCounts = {};
    tournament.pairs.forEach(pair => {
      pairCounts[pair.pair_number] = (pairCounts[pair.pair_number] || 0) + 1;
    });

    // –ò—â–µ–º –ø–∞—Ä—É —Å –æ–¥–Ω–∏–º –∏–≥—Ä–æ–∫–æ–º
    for (let i = 1; i <= tournament.pairs_count; i++) {
      if (!pairCounts[i]) {
        // –ü—É—Å—Ç–∞—è –ø–∞—Ä–∞ - —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª–∏–¥–µ—Ä–æ–º
        pairNumber = i;
        isLeader = true;
        break;
      } else if (pairCounts[i] === 1) {
        // –ü–∞—Ä–∞ —Å –æ–¥–Ω–∏–º –∏–≥—Ä–æ–∫–æ–º - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è
        pairNumber = i;
        isLeader = false;
        break;
      }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await TournamentPair.create({
      tournament_id: tournamentId,
      user_id: userId,
      pair_number: pairNumber,
      is_pair_leader: isLeader
    });

    console.log('‚úÖ User registered successfully:', { 
      tournamentId, 
      userId, 
      pairNumber, 
      isLeader 
    });

    res.json({
      success: true,
      message: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä',
      pairNumber: pairNumber,
      isLeader: isLeader
    });
  } catch (error) {
    console.error('‚ùå Error registering for tournament:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
const unregisterFromTournament = async (req, res) => {
  try {
    const { id: tournamentId } = req.params; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—É—á–∞–µ–º id –∏–∑ params
    const userId = req.user.id;

    console.log('üö´ User unregistration attempt:', { tournamentId, userId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä
    const tournament = await Tournament.findByPk(tournamentId);
    if (!tournament) {
      return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è
    if (tournament.status !== 'upcoming') {
      return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - —Ç—É—Ä–Ω–∏—Ä —É–∂–µ –Ω–∞—á–∞–ª—Å—è' });
    }

    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const registration = await TournamentPair.findOne({
      where: {
        tournament_id: tournamentId,
        user_id: userId
      }
    });

    if (!registration) {
      return res.status(400).json({ error: '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä' });
    }

    // –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await registration.destroy();

    console.log('‚úÖ User unregistered successfully:', { tournamentId, userId });

    res.json({
      success: true,
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå Error unregistering from tournament:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

module.exports = {
  getUpcomingTournaments,
  getTournamentById,
  registerForTournament,
  unregisterFromTournament
};