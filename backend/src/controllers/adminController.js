const { User, Tournament, TournamentPair } = require('../models');

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞
const updatePlayerLevel = async (req, res) => {
  try {
    const { userId } = req.params;
    const { level } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
    if (!['admin', 'manager'].includes(req.user.role)) {
      return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è
    const validLevels = ['A', 'B+', 'B', 'C+', 'C', 'D'];
    if (!validLevels.includes(level)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å' });
    }

    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    await user.update({ level });
    
    console.log('‚úÖ Player level updated:', { userId, level });
    
    res.json({ 
      success: true, 
      user: {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        level: user.level
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
const createTournament = async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!['admin', 'manager'].includes(req.user.role)) {
      return res.status(403).json({ 
        error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã' 
      });
    }

    const { name, tournamentDate, tournamentTime, pairsCount, description } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!name || !tournamentDate || !tournamentTime || !pairsCount) {
      return res.status(400).json({ 
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –≤—Ä–µ–º—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    if (pairsCount < 2) {
      return res.status(400).json({ 
        error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä - 2' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ UTC
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º MySQL —Ñ–æ—Ä–º–∞—Ç DATETIME: 'YYYY-MM-DD HH:MM:SS'
    const tournamentDateTimeString = `${tournamentDate} ${tournamentTime}:00`;
    
    console.log('üèÜ Creating tournament:', {
      name,
      tournamentDate,
      tournamentTime,
      combinedDateTime: tournamentDateTimeString,
      pairsCount,
      description,
      createdBy: req.user.id
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
    const tournamentDateObj = new Date(`${tournamentDate}T${tournamentTime}:00`);
    const today = new Date();
    
    if (tournamentDateObj < today) {
      return res.status(400).json({ 
        error: '–î–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ MySQL
    const tournament = await Tournament.create({
      name: name,
      tournament_date: tournamentDateTimeString, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ MySQL —Ñ–æ—Ä–º–∞—Ç–µ
      pairs_count: pairsCount,
      description: description,
      created_by_id: req.user.id,
      status: 'upcoming'
    });

    console.log('‚úÖ Tournament created successfully:', tournament.id);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const fullTournament = await Tournament.findByPk(tournament.id, {
      include: [
        {
          model: User,
          as: 'creator',
          attributes: ['id', 'first_name', 'last_name', 'username']
        }
      ]
    });

    res.status(201).json({
      success: true,
      tournament: {
        id: fullTournament.id,
        name: fullTournament.name,
        tournamentDate: fullTournament.tournament_date,
        pairsCount: fullTournament.pairs_count,
        description: fullTournament.description,
        status: fullTournament.status,
        creator: fullTournament.creator,
        createdAt: fullTournament.created_at
      }
    });
  } catch (error) {
    console.error('‚ùå Error creating tournament:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};


// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
const getTournaments = async (req, res) => {
  try {
    const tournaments = await Tournament.findAll({
      include: [
        {
          model: TournamentPair,
          as: 'pairs',
          include: [{
            model: User,
            as: 'user',
            attributes: ['id', 'first_name', 'last_name', 'username']
          }]
        },
        {
          model: User,
          as: 'creator',
          attributes: ['id', 'first_name', 'last_name', 'username']
        }
      ],
      order: [['tournament_date', 'ASC']]
    });

    const formattedTournaments = tournaments.map(tournament => ({
      id: tournament.id,
      name: tournament.name,
      tournamentDate: tournament.tournament_date,
      pairsCount: tournament.pairs_count,
      description: tournament.description,
      status: tournament.status,
      creator: tournament.creator,
      registeredPairs: tournament.pairs ? tournament.pairs.length : 0,
      createdAt: tournament.created_at
    }));

    res.json(formattedTournaments);
  } catch (error) {
    console.error('‚ùå Error getting tournaments:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤' });
  }
};

module.exports = {
  updatePlayerLevel,
  createTournament,
  getTournaments
};