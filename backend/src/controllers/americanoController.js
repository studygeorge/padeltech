const { User } = require('../models');
const { AmericanoGame, AmericanoPlayer, AmericanoMatch } = require('../models/americano');

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä –¥–ª—è –∞–º–µ—Ä–∏–∫–∞–Ω–æ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
function generateAmericanoRounds(playerCount) {
  const rounds = [];
  const players = Array.from({ length: playerCount }, (_, i) => i);
  
  // –î–ª—è –∞–º–µ—Ä–∏–∫–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ - 1
  const roundCount = playerCount - 1;
  
  for (let round = 0; round < roundCount; round++) {
    const matches = [];
    const availablePlayers = [...players];
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    while (availablePlayers.length >= 4) {
      const team1Player1 = availablePlayers.shift();
      const team1Player2 = availablePlayers.shift();
      const team2Player1 = availablePlayers.shift();
      const team2Player2 = availablePlayers.shift();
      
      matches.push({
        team1Player1,
        team1Player2,
        team2Player1,
        team2Player2
      });
    }
    
    rounds.push(matches);
    
    // –†–æ—Ç–∞—Ü–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (–ø—Ä–æ—Å—Ç–∞—è)
    if (playerCount > 4) {
      const first = players.shift();
      players.push(first);
    }
  }
  
  return rounds;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –∞–º–µ—Ä–∏–∫–∞–Ω–æ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Sequelize)
const createAmericano = async (req, res) => {
  try {
    const { name, players, courtNumber, maxPoints } = req.body;
    const userId = req.user?.id || null;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !players || !courtNumber || !maxPoints) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    const playerCount = players.length;
    if (!((playerCount >= 4 && playerCount <= 16) || playerCount === 20 || playerCount === 24)) {
      return res.status(400).json({ 
        error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 4 –¥–æ 16, –ª–∏–±–æ —Ä–æ–≤–Ω–æ 20 –∏–ª–∏ 24' 
      });
    }

    if (maxPoints < 8 || maxPoints > 40) {
      return res.status(400).json({ error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 8 –¥–æ 40' });
    }

    console.log('üéÆ Creating americano game with players:', players);

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ Sequelize
    const game = await AmericanoGame.create({
      name: name,
      created_by_id: userId,
      max_points: maxPoints,
      court_number: courtNumber,
      total_rounds: playerCount - 1,
      status: 'active'
    });

    console.log('‚úÖ Game created with ID:', game.id);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    const playerPromises = players.map((playerName, index) => 
      AmericanoPlayer.create({
        game_id: game.id,
        player_name: playerName,
        player_index: index
      })
    );
    
    await Promise.all(playerPromises);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—É–Ω–¥—ã
    const rounds = generateAmericanoRounds(playerCount);
    console.log('üîÑ Generated rounds:', rounds);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á–∏
    const matchPromises = [];
    for (let roundIndex = 0; roundIndex < rounds.length; roundIndex++) {
      for (const match of rounds[roundIndex]) {
        matchPromises.push(
          AmericanoMatch.create({
            game_id: game.id,
            round_number: roundIndex + 1,
            team1_player1: match.team1Player1,
            team1_player2: match.team1Player2,
            team2_player1: match.team2Player1,
            team2_player2: match.team2Player2
          })
        );
      }
    }
    
    await Promise.all(matchPromises);

    res.status(201).json({
      success: true,
      gameId: game.id,
      message: '–ò–≥—Ä–∞ –∞–º–µ—Ä–∏–∫–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('‚ùå Error creating americano:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
const getAmericanoGame = async (req, res) => {
  try {
    const gameId = req.params.id;

    const game = await AmericanoGame.findByPk(gameId, {
      include: [
        {
          model: AmericanoPlayer,
          as: 'players'
        },
        {
          model: AmericanoMatch,
          as: 'matches'
        }
      ]
    });

    if (!game) {
      return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
    const rounds = [];
    for (let i = 1; i <= game.total_rounds; i++) {
      const roundMatches = game.matches
        .filter(m => m.round_number === i)
        .map(match => ({
          id: match.id,
          team1: {
            player1: game.players[match.team1_player1]?.player_name,
            player2: game.players[match.team1_player2]?.player_name
          },
          team2: {
            player1: game.players[match.team2_player1]?.player_name,
            player2: game.players[match.team2_player2]?.player_name
          },
          team1Score: match.team1_score,
          team2Score: match.team2_score,
          courtNumber: game.court_number
        }));
      
      rounds.push({
        roundNumber: i,
        matches: roundMatches
      });
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    const leaderboard = calculateLeaderboard(game.players, game.matches);

    const gameData = {
      id: game.id,
      name: game.name,
      gameType: '–ê–º–µ—Ä–∏–∫–∞–Ω–æ',
      maxPoints: game.max_points,
      courtNumber: game.court_number,
      status: game.status,
      players: game.players.map(p => p.player_name),
      rounds: rounds,
      leaderboard: leaderboard
    };

    res.json(gameData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã' });
  }
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
function calculateLeaderboard(players, matches) {
    const stats = {};
    
    players.forEach(player => {
      stats[player.player_index] = {
        name: player.player_name,
        wins: 0,
        draws: 0,
        losses: 0,
        pointsFor: 0,
        pointsAgainst: 0,
        pointDiff: 0
      };
    });
  
    matches.forEach(match => {
      if (match.team1_score !== null && match.team2_score !== null) {
        const team1Players = [match.team1_player1, match.team1_player2];
        const team2Players = [match.team2_player1, match.team2_player2];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        team1Players.forEach(playerId => {
          if (stats[playerId]) {
            stats[playerId].pointsFor += match.team1_score;
            stats[playerId].pointsAgainst += match.team2_score;
          }
        });
        
        team2Players.forEach(playerId => {
          if (stats[playerId]) {
            stats[playerId].pointsFor += match.team2_score;
            stats[playerId].pointsAgainst += match.team1_score;
          }
        });
  
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
        if (match.team1_score > match.team2_score) {
          team1Players.forEach(playerId => {
            if (stats[playerId]) stats[playerId].wins++;
          });
          team2Players.forEach(playerId => {
            if (stats[playerId]) stats[playerId].losses++;
          });
        } else if (match.team1_score < match.team2_score) {
          team1Players.forEach(playerId => {
            if (stats[playerId]) stats[playerId].losses++;
          });
          team2Players.forEach(playerId => {
            if (stats[playerId]) stats[playerId].wins++;
          });
        } else {
          // –ù–∏—á—å—è
          team1Players.forEach(playerId => {
            if (stats[playerId]) stats[playerId].draws++;
          });
          team2Players.forEach(playerId => {
            if (stats[playerId]) stats[playerId].draws++;
          });
        }
      }
    });
  
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –æ—á–∫–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const leaderboard = Object.values(stats).map(player => ({
      ...player,
      pointDiff: player.pointsFor - player.pointsAgainst
    })).sort((a, b) => {
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: 1) –ø–æ–±–µ–¥—ã, 2) —Ä–∞–∑–Ω–æ—Å—Ç—å –æ—á–∫–æ–≤, 3) –æ—á–∫–∏ –∑–∞
      if (b.wins !== a.wins) return b.wins - a.wins;
      if (b.pointDiff !== a.pointDiff) return b.pointDiff - a.pointDiff;
      return b.pointsFor - a.pointsFor;
    });
  
    return leaderboard;
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –º–∞—Ç—á–∞
  const saveMatchScore = async (req, res) => {
    try {
      const { matchId, team1Score, team2Score } = req.body;
  
      if (team1Score == null || team2Score == null) {
        return res.status(400).json({ error: '–°—á–µ—Ç –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      }
  
      const match = await AmericanoMatch.findByPk(matchId);
      if (!match) {
        return res.status(404).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
  
      await match.update({
        team1_score: team1Score,
        team2_score: team2Score
      });
  
      console.log('‚úÖ Match score updated:', { matchId, team1Score, team2Score });
  
      res.json({ success: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞' });
    }
  };
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  const finishGame = async (req, res) => {
    try {
      const gameId = req.params.id;
  
      const game = await AmericanoGame.findByPk(gameId);
      if (!game) {
        return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
  
      await game.update({
        status: 'finished'
      });
  
      console.log('‚úÖ Game finished:', gameId);
  
      res.json({ success: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã' });
    }
  };
  
  module.exports = {
    createAmericano,
    getAmericanoGame,
    saveMatchScore,
    finishGame
  };