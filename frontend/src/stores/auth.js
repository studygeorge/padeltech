import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import { authAPI } from '@/services/api';
import { storage } from '@/utils/storage';

export const useAuthStore = defineStore('auth', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const user = ref(null);
  const token = ref(null);
  const isLoading = ref(false);
  const error = ref(null);
  const isInitialized = ref(false);

  // –ì–µ—Ç—Ç–µ—Ä—ã
  const isAuthenticated = computed(() => !!token.value && !!user.value);
  const userFullName = computed(() => {
    if (!user.value) return '';
    return `${user.value.firstName || ''} ${user.value.lastName || ''}`.trim();
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  const saveToStorage = (newToken, userData) => {
    storage.set('auth_token', newToken);
    storage.set('user_data', userData);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  const clearFromStorage = () => {
    storage.remove('auth_token');
    storage.remove('user_data');
  };

  // –î–µ–π—Å—Ç–≤–∏—è
  const loginWithTelegram = async (telegramData) => {
    try {
      isLoading.value = true;
      error.value = null;
      
      console.log('üîê Attempting Telegram login...');
      const response = await authAPI.telegramAuth(telegramData);
      const { token: newToken, user: userData } = response.data;
      
      console.log('‚úÖ Login successful, saving data...');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ store –∏ localStorage
      token.value = newToken;
      user.value = userData;
      saveToStorage(newToken, userData);
      
      console.log('‚úÖ Auth data saved successfully');
      return { success: true };
    } catch (err) {
      console.error('‚ùå Login failed:', err);
      error.value = err.response?.data?.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      return { success: false, error: error.value };
    } finally {
      isLoading.value = false;
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const completeRegistration = async (data) => {
    try {
      isLoading.value = true;
      error.value = null;
      
      console.log('üîß Completing registration...');
      const response = await authAPI.completeRegistration(data);
      const { user: userData } = response.data;
      
      console.log('‚úÖ Registration completed successfully');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.value = userData;
      saveToStorage(token.value, userData);
      
      return { success: true };
    } catch (err) {
      console.error('‚ùå Registration completion failed:', err);
      error.value = err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      return { success: false, error: error.value };
    } finally {
      isLoading.value = false;
    }
  };

  const logout = async () => {
    try {
      console.log('üëã Logging out...');
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
      const currentToken = token.value;
      token.value = null;
      user.value = null;
      clearFromStorage();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–Ω–æ –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
      if (currentToken) {
        authAPI.logout().catch(err => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', err);
        });
      }
      
      console.log('‚úÖ Logout completed');
    } catch (err) {
      console.error('‚ùå Error during logout:', err);
    }
  };

  const verifyToken = async () => {
    if (!token.value) {
      console.log('‚ùå No token to verify');
      return false;
    }
    
    try {
      console.log('üîç Verifying token...');
      const response = await authAPI.verifyToken();
      user.value = response.data.user;
      console.log('‚úÖ Token verified successfully');
      return true;
    } catch (err) {
      console.log('‚ùå Token verification failed:', err.response?.status);
      // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
      logout();
      return false;
    }
  };

  const initializeAuth = async () => {
    if (isInitialized.value) {
      console.log('üîÑ Auth already initialized');
      return;
    }

    console.log('üîÑ Initializing auth...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage
    if (!storage.isAvailable()) {
      console.error('‚ùå localStorage is not available');
      isInitialized.value = true;
      return;
    }
    
    try {
      const savedUser = storage.get('user_data');
      const savedToken = storage.get('auth_token');
      
      console.log('üì¶ Saved token exists:', !!savedToken);
      console.log('üì¶ Saved user exists:', !!savedUser);
      
      if (savedUser && savedToken) {
        console.log('üì¶ Found saved auth data, restoring...');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ store
        user.value = savedUser;
        token.value = savedToken;
        
        console.log('üì¶ Data restored to store, verifying token...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        const isValid = await verifyToken();
        if (isValid) {
          console.log('‚úÖ Auth restored successfully');
        } else {
          console.log('‚ùå Token invalid, clearing auth data');
        }
      } else {
        console.log('‚ÑπÔ∏è  No saved auth data found');
      }
    } catch (err) {
      console.error('‚ùå Error during auth initialization:', err);
      clearFromStorage();
    }
    
    isInitialized.value = true;
    console.log('‚úÖ Auth initialization completed');
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    user,
    token,
    isLoading,
    error,
    isInitialized,
    
    // –ì–µ—Ç—Ç–µ—Ä—ã
    isAuthenticated,
    userFullName,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    loginWithTelegram,
    logout,
    verifyToken,
    initializeAuth,
    completeRegistration
  };
});